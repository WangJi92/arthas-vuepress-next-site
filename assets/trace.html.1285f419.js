import{_ as l,r as o,o as c,c as d,a as e,b as s,w as i,F as m,d as a,e as t}from"./app.1edb3735.js";const p={},h=e("h1",{id:"trace",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#trace","aria-hidden":"true"},"#"),a(" trace")],-1),u={href:"https://arthas.aliyun.com/doc/arthas-tutorials.html?language=en&id=command-trace",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"trace",-1),g=a(" online tutorial"),f=t('<blockquote><p>Trace method calling path, and output the time cost for each node in the path.</p></blockquote><p><code>trace</code> can track the calling path specified by <code>class-pattern</code> / <code>method-pattern</code>, and calculate the time cost on the whole path.</p><h3 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h3><table><thead><tr><th style="text-align:right;">Name</th><th style="text-align:left;">Specification</th></tr></thead><tbody><tr><td style="text-align:right;"><em>class-pattern</em></td><td style="text-align:left;">pattern for the class name</td></tr><tr><td style="text-align:right;"><em>method-pattern</em></td><td style="text-align:left;">pattern for the method name</td></tr><tr><td style="text-align:right;"><em>condition-express</em></td><td style="text-align:left;">condition expression</td></tr><tr><td style="text-align:right;"><code>[E]</code></td><td style="text-align:left;">enable regex match, the default behavior is wildcards match</td></tr><tr><td style="text-align:right;"><code>[n:]</code></td><td style="text-align:left;">execution times</td></tr><tr><td style="text-align:right;">#cost</td><td style="text-align:left;">time cost</td></tr></tbody></table><p>There&#39;s one thing worthy noting here is observation expression. The observation expression supports OGNL grammar, for example, you can come up a expression like this <code>&quot;{params,returnObj}&quot;</code>. All OGNL expressions are supported as long as they are legal to the grammar.</p><p>Thanks for <code>advice</code>&#39;s data structure, it is possible to observe from varieties of different angles. Inside <code>advice</code> parameter, all necessary information for notification can be found.</p>',6),v=a("Pls. refer to "),x=a("core parameters in expression"),_=a(" for more details."),y=a("Pls. also refer to "),C={href:"https://github.com/alibaba/arthas/issues/71",target:"_blank",rel:"noopener noreferrer"},w=a("https://github.com/alibaba/arthas/issues/71"),k=a(" for more advanced usage"),M=a("OGNL official site: "),G={href:"https://commons.apache.org/proper/commons-ognl/language-guide.html",target:"_blank",rel:"noopener noreferrer"},L=a("https://commons.apache.org/proper/commons-ognl/language-guide.html"),T=t('<p>Many times what we are interested is the exact trace result when the method call takes time over one particular period. It is possible to achieve this in Arthas, for example: <code>trace *StringUtils isBlank &#39;#cost&gt;100&#39;</code> means trace result will only be output when the executing time exceeds 100ms.</p><blockquote><p><code>watch</code>/<code>stack</code>/<code>trace</code>, these three commands all support <code>#cost</code>.</p></blockquote><h3 id="notice" tabindex="-1"><a class="header-anchor" href="#notice" aria-hidden="true">#</a> Notice</h3>',3),j=e("li",null,[e("p",null,[e("code",null,"trace"),a(" is handy to help discovering and locating the performance flaws in your system, but pls. note Arthas can only trace the first level method call each time.")])],-1),A=e("li",null,[e("p",null,"After version 3.3.0, you can use the Dynamic Trace feature to add new matching classes/methods, see the following example.")],-1),F=a("Currently "),S=e("code",null,"trace java.lang.Thread getName",-1),q=a(" is not supported, please refer to issue: "),I={href:"https://github.com/alibaba/arthas/issues/1610",target:"_blank",rel:"noopener noreferrer"},$=a("#1610"),E=a(", considering that it is not very necessary and it is difficult to repair , So it won\u2019t be fixed for now"),B=e("h3",{id:"usage",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#usage","aria-hidden":"true"},"#"),a(" Usage")],-1),P=e("h4",{id:"start-demo",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#start-demo","aria-hidden":"true"},"#"),a(" Start Demo")],-1),N=a("Start "),D=e("code",null,"math-game",-1),O=a(" in "),Q=a("Quick Start"),J=a("."),R=t(`<h4 id="trace-method" tabindex="-1"><a class="header-anchor" href="#trace-method" aria-hidden="true">#</a> Trace method</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ trace demo.MathGame run
Press Q or Ctrl+C to abort.
Affect(class-cnt:1 , method-cnt:1) cost in 28 ms.
\`---ts=2019-12-04 00:45:08;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69
    \`---[0.617465ms] demo.MathGame:run()
        \`---[0.078946ms] demo.MathGame:primeFactors() #24 [throws Exception]

\`---ts=2019-12-04 00:45:09;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69
    \`---[1.276874ms] demo.MathGame:run()
        \`---[0.03752ms] demo.MathGame:primeFactors() #24 [throws Exception]
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>The <code>#24</code> in the result indicates that in the run function, the <code>primeFactors()</code> function was called on line <code>24</code> of the source file.</p></blockquote><h4 id="trace-times-limit" tabindex="-1"><a class="header-anchor" href="#trace-times-limit" aria-hidden="true">#</a> Trace times limit</h4><p>If the method invoked many times, use <code>-n</code> options to specify trace times. For example, the command will exit when received a trace result.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ trace demo.MathGame run -n 1
Press Q or Ctrl+C to abort.
Affect(class-cnt:1 , method-cnt:1) cost in 20 ms.
\`---ts=2019-12-04 00:45:53;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69
    \`---[0.549379ms] demo.MathGame:run()
        +---[0.059839ms] demo.MathGame:primeFactors() #24
        \`---[0.232887ms] demo.MathGame:print() #25

Command execution times exceed limit: 1, so command will exit. You can set it with -n option.
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="include-jdk-method" tabindex="-1"><a class="header-anchor" href="#include-jdk-method" aria-hidden="true">#</a> Include jdk method</h4><ul><li><code>--skipJDKMethod &lt;value&gt; </code> skip jdk method trace, default value true.</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ trace --skipJDKMethod false demo.MathGame run
Press Q or Ctrl+C to abort.
Affect(class-cnt:1 , method-cnt:1) cost in 60 ms.
\`---ts=2019-12-04 00:44:41;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69
    \`---[1.357742ms] demo.MathGame:run()
        +---[0.028624ms] java.util.Random:nextInt() #23
        +---[0.045534ms] demo.MathGame:primeFactors() #24 [throws Exception]
        +---[0.005372ms] java.lang.StringBuilder:&lt;init&gt;() #28
        +---[0.012257ms] java.lang.Integer:valueOf() #28
        +---[0.234537ms] java.lang.String:format() #28
        +---[min=0.004539ms,max=0.005778ms,total=0.010317ms,count=2] java.lang.StringBuilder:append() #28
        +---[0.013777ms] java.lang.Exception:getMessage() #28
        +---[0.004935ms] java.lang.StringBuilder:toString() #28
        \`---[0.06941ms] java.io.PrintStream:println() #28

\`---ts=2019-12-04 00:44:42;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69
    \`---[3.030432ms] demo.MathGame:run()
        +---[0.010473ms] java.util.Random:nextInt() #23
        +---[0.023715ms] demo.MathGame:primeFactors() #24 [throws Exception]
        +---[0.005198ms] java.lang.StringBuilder:&lt;init&gt;() #28
        +---[0.006405ms] java.lang.Integer:valueOf() #28
        +---[0.178583ms] java.lang.String:format() #28
        +---[min=0.011636ms,max=0.838077ms,total=0.849713ms,count=2] java.lang.StringBuilder:append() #28
        +---[0.008747ms] java.lang.Exception:getMessage() #28
        +---[0.019768ms] java.lang.StringBuilder:toString() #28
        \`---[0.076457ms] java.io.PrintStream:println() #28
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h4 id="filtering-by-cost" tabindex="-1"><a class="header-anchor" href="#filtering-by-cost" aria-hidden="true">#</a> Filtering by cost</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ trace demo.MathGame run &#39;#cost &gt; 10&#39;
Press Ctrl+C to abort.
Affect(class-cnt:1 , method-cnt:1) cost in 41 ms.
\`---ts=2018-12-04 01:12:02;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69
    \`---[12.033735ms] demo.MathGame:run()
        +---[0.006783ms] java.util.Random:nextInt()
        +---[11.852594ms] demo.MathGame:primeFactors()
        \`---[0.05447ms] demo.MathGame:print()
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p>Only the call path which&#39;s time cost is higher than <code>10ms</code> will be shown. This feature is handy to focus on what&#39;s needed to focus when troubleshoot.</p></blockquote><ul><li>Here Arthas provides the similar functionality JProfile and other commercial software provide. Compared to these professional softwares, Arthas doesn&#39;t deduce the time cost <code>trace</code> itself takes, therefore it is not as accurate as these softwares offer. More classes and methods on the calling path, more inaccurate <code>trace</code> output is, but it is still helpful for diagnostics where the bottleneck is.</li><li>&quot;[12.033735ms]&quot; means the method on the node takes <code>12.033735</code> ms.</li><li>&quot;[min=0.005428ms,max=0.094064ms,total=0.105228ms,count=3] demo:call()&quot; means aggregating all same method calls into one single line. The minimum time cost is <code>0.005428</code> ms, the maximum time cost is <code>0.094064</code> ms, and the total time cost for all method calls (<code>3</code> times in total) to &quot;demo:call()&quot; is <code>0.105228ms</code>. If &quot;throws Exception&quot; appears in this line, it means some exceptions have been thrown from this method calls.</li><li>The total time cost may not equal to the sum of the time costs each sub method call takes, this is because Arthas instrumented code takes time too.</li></ul><h4 id="trace-multiple-classes-or-multiple-methods" tabindex="-1"><a class="header-anchor" href="#trace-multiple-classes-or-multiple-methods" aria-hidden="true">#</a> Trace multiple classes or multiple methods</h4><p>The trace command will only trace the subcalls in the method to the trace, and will not trace down multiple layers. Because traces are expensive, multi-layer traces can lead to a lot of classes and methods that ultimately have to be traced.</p><p>You can use the regular expression to match multiple classes and methods on the path to achieve a multi-layer trace effect to some extent.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Trace -E com.test.ClassA|org.test.ClassB method1|method2|method3
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="exclude-the-specified-class" tabindex="-1"><a class="header-anchor" href="#exclude-the-specified-class" aria-hidden="true">#</a> Exclude the specified class</h4><blockquote><p>The watch/trace/monitor/stack/tt commands all support the <code>--exclude-class-pattern</code> parameter</p></blockquote><p>Use the <code>--exclude-class-pattern</code> parameter to exclude the specified class, for example:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>watch javax.servlet.Filter * --exclude-class-pattern com.demo.TestFilter
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="dynamic-trace" tabindex="-1"><a class="header-anchor" href="#dynamic-trace" aria-hidden="true">#</a> Dynamic trace</h4><blockquote><p>Supported since version 3.3.0.</p></blockquote><p>Open terminal 1, trace the <code>run</code> method in the above demo, and you can see the printout <code>listenerId: 1</code> .</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>[arthas@59161]$ trace demo.MathGame run
Press Q or Ctrl+C to abort.
Affect(class count: 1 , method count: 1) cost in 112 ms, listenerId: 1
\`---ts=2020-07-09 16:48:11;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69
    \`---[1.389634ms] demo.MathGame:run()
        \`---[0.123934ms] demo.MathGame:primeFactors() #24 [throws Exception]

\`---ts=2020-07-09 16:48:12;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69
    \`---[3.716391ms] demo.MathGame:run()
        +---[3.182813ms] demo.MathGame:primeFactors() #24
        \`---[0.167786ms] demo.MathGame:print() #25
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Now to drill down into the sub method <code>primeFactors</code>, you can open a new terminal 2 and use the <code>telnet localhost 3658</code> connects to the arthas, then trace <code>primeFactors</code> with the specify <code>listenerId</code>.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>[arthas@59161]$ trace demo.MathGame primeFactors --listenerId 1
Press Q or Ctrl+C to abort.
Affect(class count: 1 , method count: 1) cost in 34 ms, listenerId: 1
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>At Terminal 2 prints the results, indicating that a method has been enhanced: <code>Affect(class count: 1 , method count: 1)</code>, but no more results are printed.</p><p>At terminal 1, you can see that the trace result has increased by one layer:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>\`---ts=2020-07-09 16:49:29;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69
    \`---[0.492551ms] demo.MathGame:run()
        \`---[0.113929ms] demo.MathGame:primeFactors() #24 [throws Exception]
            \`---[0.061462ms] demo.MathGame:primeFactors()
                \`---[0.001018ms] throw:java.lang.IllegalArgumentException() #46

\`---ts=2020-07-09 16:49:30;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69
    \`---[0.409446ms] demo.MathGame:run()
        +---[0.232606ms] demo.MathGame:primeFactors() #24
        |   \`---[0.1294ms] demo.MathGame:primeFactors()
        \`---[0.084025ms] demo.MathGame:print() #25
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Dynamic trace by specifying <code>listenerId</code>, you can go deeper and deeper. In addition, commands such as <code>watch</code>/<code>tt</code>/<code>monitor</code> also support similar functionality.</p><h3 id="trace-result-time-inaccuracy-problem" tabindex="-1"><a class="header-anchor" href="#trace-result-time-inaccuracy-problem" aria-hidden="true">#</a> Trace result time inaccuracy problem</h3><p>For example, in the following result: <code>0.705196 &gt; (0.152743 + 0.145825)</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ trace demo.MathGame run -n 1
Press Q or Ctrl+C to abort.
Affect(class count: 1 , method count: 1) cost in 66 ms, listenerId: 1
\`---ts=2021-02-08 11:27:36;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@232204a1
    \`--[0.705196ms] demo.MathGame:run()
        +---[0.152743ms] demo.MathGame:primeFactors() #24
        \`--[0.145825ms] demo.MathGame:print() #25
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>So where is the rest of the time consumed?</p><ol><li><p>Methods that are not traced to. For example, methods under <code>java.*</code> are ignored by default. This can be printed out by adding the <code>-skipJDKMethod false</code> parameter.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ trace demo.MathGame run --skipJDKMethod false
Press Q or Ctrl+C to abort.
Affect(class count: 1 , method count: 1) cost in 35 ms, listenerId: 2
\`---ts=2021-02-08 11:27:48;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@232204a1
    \`--[0.810591ms] demo.MathGame:run()
        +--[0.034568ms] java.util.Random:nextInt() #23
        +---[0.119367ms] demo.MathGame:timeFactors() #24 [throws Exception]
        +---[0.017407ms] java.lang.StringBuilder:&lt;init&gt;() #28
        +--[0.127922ms] java.lang.String:format() #57
        +---[min=0.01419ms,max=0.020221ms,total=0.034411ms,count=2] java.lang.StringBuilder:append() #57
        +--[0.021911ms] java.lang.Exception:getMessage() #57
        +---[0.015643ms] java.lang.StringBuilder:toString() #57
        \`--[0.086622ms] java.io.PrintStream:println() #57
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>Instruction consumption. For example, instructions such as <code>i++</code>, <code>getfield</code>, etc.</p></li><li><p>Possible JVM pause during code execution, such as GC, entering synchronization blocks, etc.</p></li></ol><h4 id="use-the-v-parameter-to-print-more-information" tabindex="-1"><a class="header-anchor" href="#use-the-v-parameter-to-print-more-information" aria-hidden="true">#</a> Use the -v parameter to print more information</h4><blockquote><p>The watch/trace/monitor/stack/tt commands all support the <code>-v</code> parameter.</p></blockquote><p>When the command is executed, there is no output result. There are two possibilities:</p><ol><li>The matched function is not executed</li><li>The result of the conditional expression is false</li></ol><p>But the user cannot tell which situation is.</p><p>Using the <code>-v</code> option, the specific value and execution result of <code>Condition express</code> will be printed for easy confirmation.</p>`,42);function U(V,K){const n=o("ExternalLinkIcon"),r=o("RouterLink");return c(),d(m,null,[h,e("p",null,[e("a",u,[b,g,s(n)])]),f,e("p",null,[v,s(r,{to:"/en/doc/advice-class.html"},{default:i(()=>[x]),_:1}),_]),e("ul",null,[e("li",null,[y,e("a",C,[w,s(n)]),k]),e("li",null,[M,e("a",G,[L,s(n)])])]),T,e("ul",null,[j,A,e("li",null,[e("p",null,[F,S,q,e("a",I,[$,s(n)]),E])])]),B,P,e("p",null,[N,D,O,s(r,{to:"/en/doc/quick-start.html"},{default:i(()=>[Q]),_:1}),J]),R],64)}var z=l(p,[["render",U],["__file","trace.html.vue"]]);export{z as default};
