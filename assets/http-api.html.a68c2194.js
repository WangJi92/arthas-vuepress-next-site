import{_ as r}from"./arthas-web-ui.2f403248.js";import{_ as l,r as o,o as i,c,a as e,b as n,w as p,F as d,d as s,e as t}from"./app.1edb3735.js";const b={},m=e("h1",{id:"http-api",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#http-api","aria-hidden":"true"},"#"),s(" Http API")],-1),h={href:"https://arthas.aliyun.com/doc/arthas-tutorials.html?language=en&id=case-http-api",target:"_blank",rel:"noopener noreferrer"},q=e("code",null,"Http API",-1),g=s(" online tutorial"),f=t(`<h3 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h3><p>Http API provides a RESTful-like interactive interface, and both requests and responses data in JSON format. Compared with Telnet/WebConsole&#39;s output unstructured text data, Http API can provide structured data and support more complex interactive functions, such as a series of diagnostic operations in specific application scenarios.</p><h4 id="access-address" tabindex="-1"><a class="header-anchor" href="#access-address" aria-hidden="true">#</a> Access address</h4><p>The Http API address is: <code>http://ip:port/api</code>, the request parameters must be submitted using <code>POST</code>. Such as POST <code>http://127.0.0.1:8563/api</code>.</p><p>Note: The telnet port <code>3658</code> has compatibility issues with the Chrome browser. It is recommended to use the http port <code>8563</code> to access the http api.</p><h4 id="request-data-format" tabindex="-1"><a class="header-anchor" href="#request-data-format" aria-hidden="true">#</a> Request data format</h4><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>{
  &quot;action&quot;: &quot;exec&quot;,
  &quot;requestId&quot;: &quot;req112&quot;,
  &quot;sessionId&quot;: &quot;94766d3c-8b39-42d3-8596-98aee3ccbefb&quot;,
  &quot;consumerId&quot;: &quot;955dbd1325334a84972b0f3ac19de4f7_2&quot;,
  &quot;command&quot;: &quot;version&quot;,
  &quot;execTimeout&quot;: &quot;10000&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Request data format description:</p><ul><li><code>action</code> : The requested action/behavior, please refer to &quot;Request Actions&quot; for optional values.</li><li><code>requestId</code> : Optional request ID, generated by the client.</li><li><code>sessionId</code> : Arthas session ID, one-time command does not need to set the session ID.</li><li><code>consumerId</code> : Arthas consumer ID, used for multi-person sharing sessions.</li><li><code>command</code> : Arthas command line</li><li><code>execTimeout</code> : Timeout for executing commands (ms), default value is 30000.</li></ul><p>Note: Different actions use different parameters. Set the parameters according to the specific action.</p><h4 id="request-actions" tabindex="-1"><a class="header-anchor" href="#request-actions" aria-hidden="true">#</a> Request Actions</h4><p>Currently supported request actions are as follows:</p><ul><li><code>exec</code> : The command is executed synchronously, and the command results is returned after the command execution end or interrupted.</li><li><code>async_exec</code> : The command is executed asynchronously, and the scheduling result of the command is returned immediately. The command execution result is obtained through <code>pull_results</code> action.</li><li><code>interrupt_job</code> : To interrupt the foreground command of the session, similar to the function of Telnet <code>Ctrl + c</code>.</li><li><code>pull_results</code> : Get the result of the command executed asynchronously, and execute it repeatedly in http long-polling mode.</li><li><code>init_session</code> : Create new session.</li><li><code>join_session</code> : Join the session, used to support multiple people sharing the same Arthas session.</li><li><code>close_session</code> : Close the session.</li></ul><h4 id="response-status" tabindex="-1"><a class="header-anchor" href="#response-status" aria-hidden="true">#</a> Response status</h4><p>The state attribute in the response indicates the request processing state, and its value is as follows:</p><ul><li><code>SCHEDULED</code>: When the command is executed asynchronously, it means that the job has been created, and may not be executed yet or is being executed;</li><li><code>SUCCEEDED</code>: The request is processed successfully (completed status);</li><li><code>FAILED</code>: Request processing failed (completed status), usually accompanied by a message explaining the reason;</li><li><code>REFUSED</code>: The request is rejected (completed status), usually accompanied by a message explaining the reason;</li></ul><h3 id="one-time-command" tabindex="-1"><a class="header-anchor" href="#one-time-command" aria-hidden="true">#</a> One-time command</h3><p>Similar to executing batch commands, the one-time commands are executed synchronously. No need to create a session, no need to set the <code>sessionId</code> option.</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>{
  &quot;action&quot;: &quot;exec&quot;,
  &quot;command&quot;: &quot;&lt;Arthas command line&gt;&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>For example, get the Arthas version number:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>curl -Ss -XPOST http://localhost:8563/api -d &#39;
{
  &quot;action&quot;:&quot;exec&quot;,
  &quot;command&quot;:&quot;version&quot;
}
&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>The response is as follows:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>{
   &quot;state&quot; : &quot;SUCCEEDED&quot;,
   &quot;sessionId&quot; : &quot;ee3bc004-4586-43de-bac0-b69d6db7a869&quot;,
   &quot;body&quot; : {
      &quot;results&quot; : [
         {
            &quot;type&quot; : &quot;version&quot;,
            &quot;version&quot; : &quot;3.3.7&quot;,
            &quot;jobId&quot; : 5
         },
         {
            &quot;jobId&quot; : 5,
            &quot;statusCode&quot; : 0,
            &quot;type&quot; : &quot;status&quot;
         }
      ],
      &quot;timeExpired&quot; : false,
      &quot;command&quot; : &quot;version&quot;,
      &quot;jobStatus&quot; : &quot;TERMINATED&quot;,
      &quot;jobId&quot; : 5
   }
}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>Response data format description:</p><ul><li><code>state</code>: Request processing status, refer to the description of &quot;Response Status&quot;.</li><li><code>sessionId </code>: Arthas session ID, one-time command to automatically create and destroy temporary sessions.</li><li><code>body.jobId</code>: The job ID of the command, all output results of the same job are the same jobId.</li><li><code>body.jobStatus</code>: The job status of the command.</li><li><code>body.timeExpired</code>: Whether the job execution timed out.</li><li><code>body/results</code>: Command execution results.</li></ul><p><strong>Command result format description</strong></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code> [{
    &quot;type&quot; : &quot;version&quot;,
    &quot;version&quot; : &quot;3.3.7&quot;,
    &quot;jobId&quot; : 5
 },
 {
    &quot;jobId&quot; : 5,
    &quot;statusCode&quot; : 0,
    &quot;type&quot; : &quot;status&quot;
 }]
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li><code>type</code> : The command result type, except for the special ones such as <code>status</code>, the others remain the same as the Arthas command name. Please refer to the section &quot;<a href="#special_command_results">Special command results</a>&quot;.</li><li><code>jobId</code> : The job ID of the command.</li><li>Other fields are the data of each different command.</li></ul><p>Note: You can also use a one-time command to execute continuous output commands such as watch/trace, but you can&#39;t interrupt the command execution, and there may be hang up for a long time. Please refer to the example in the &quot;<a href="#change_watch_value_to_map">Make watch command output a map object</a>&quot; section.</p><p>Please try to deal with it in the following way:</p><ul><li>Set a reasonable <code>execTimeout</code> to forcibly interrupt the command execution after the timeout period is reached to avoid a long hang.</li><li>Use the <code>-n</code> parameter to specify a smaller number of executions.</li><li>Ensure the methods of the command matched can be successfully hit and the <code>condition-express</code> is written correctly. If the <code>watch/trace</code> does not hit, even if <code>-n 1</code> is specified, it will hang and wait until the execution timeout.</li></ul><h3 id="session-interaction" tabindex="-1"><a class="header-anchor" href="#session-interaction" aria-hidden="true">#</a> Session interaction</h3><p>Users create and manage Arthas sessions, which are suitable for complex interactive processes. The access process is as follows:</p><ul><li>Create a session</li><li>Join the session (optional)</li><li>Pull command results</li><li>Execute a series of commands</li><li>Interrupt command execution</li><li>Close the session</li></ul><h4 id="create-session" tabindex="-1"><a class="header-anchor" href="#create-session" aria-hidden="true">#</a> Create session</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>curl -Ss -XPOST http://localhost:8563/api -d &#39;
{
  &quot;action&quot;:&quot;init_session&quot;
}
&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Response result:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>{
   &quot;sessionId&quot; : &quot;b09f1353-202c-407b-af24-701b744f971e&quot;,
   &quot;consumerId&quot; : &quot;5ae4e5fbab8b4e529ac404f260d4e2d1_1&quot;,
   &quot;state&quot; : &quot;SUCCEEDED&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>The new session ID is: <code>b09f1353-202c-407b-af24-701b744f971e</code>, and consumer ID is: <code>5ae4e5fbab8b4e529ac404f260d4e2d1_1</code>.</p><h4 id="join-session" tabindex="-1"><a class="header-anchor" href="#join-session" aria-hidden="true">#</a> Join session</h4><p>Specify the session ID to join, and the server will assign a new consumer ID. Multiple consumers can receive the same command results of target session. This interface is used to support multiple people sharing the same session or refreshing the page to retrieve the session history.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>curl -Ss -XPOST http://localhost:8563/api -d &#39;
{
  &quot;action&quot;:&quot;join_session&quot;,
  &quot;sessionId&quot; : &quot;b09f1353-202c-407b-af24-701b744f971e&quot;
}
&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Response result:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>{
   &quot;consumerId&quot; : &quot;8f7f6ad7bc2d4cb5aa57a530927a95cc_2&quot;,
   &quot;sessionId&quot; : &quot;b09f1353-202c-407b-af24-701b744f971e&quot;,
   &quot;state&quot; : &quot;SUCCEEDED&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>The new consumer ID is <code>8f7f6ad7bc2d4cb5aa57a530927a95cc_2 </code> .</p><h4 id="pull-command-results" tabindex="-1"><a class="header-anchor" href="#pull-command-results" aria-hidden="true">#</a> Pull command results</h4><p>The action of pulling the command result message is <code>pull_results</code>. Please use the Http long-polling method to periodically pull the result messages. The consumer&#39;s timeout period is 5 minutes. After the timeout, you need to call <code>join_session</code> to allocate a new consumer.</p><p>Each consumer is allocated a cache queue separately, and the pull order does not affect the content received by the consumer.</p><p>The request parameters require session ID and consumer ID:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>curl -Ss -XPOST http://localhost:8563/api -d &#39;
{
  &quot;action&quot;:&quot;pull_results&quot;,
  &quot;sessionId&quot; : &quot;b09f1353-202c-407b-af24-701b744f971e&quot;,
  &quot;consumerId&quot; : &quot;8f7f6ad7bc2d4cb5aa57a530927a95cc_2&quot;
}
&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Use Bash scripts to regularly pull results messages:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>while true; do curl -Ss -XPOST http://localhost:8563/api -d &#39;
{
  &quot;action&quot;:&quot;pull_results&quot;,
  &quot;sessionId&quot; : &quot;2b085b5d-883b-4914-ab35-b2c5c1d5aa2a&quot;,
  &quot;consumerId&quot; : &quot;8ecb9cb7c7804d5d92e258b23d5245cc_1&quot;
}
&#39; | json_pp; sleep 2; done
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Note: The <code>json_pp</code> tool formats the output content as pretty json.</p><p>The response content is as follows:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>{
   &quot;body&quot; : {
      &quot;results&quot; : [
         {
            &quot;inputStatus&quot; : &quot;DISABLED&quot;,
            &quot;jobId&quot; : 0,
            &quot;type&quot; : &quot;input_status&quot;
         },
         {
            &quot;type&quot; : &quot;message&quot;,
            &quot;jobId&quot; : 0,
            &quot;message&quot; : &quot;Welcome to arthas!&quot;
         },
         {
            &quot;tutorials&quot; : &quot;https://arthas.aliyun.com/doc/arthas-tutorials.html&quot;,
            &quot;time&quot; : &quot;2020-08-06 15:56:43&quot;,
            &quot;type&quot; : &quot;welcome&quot;,
            &quot;jobId&quot; : 0,
            &quot;pid&quot; : &quot;7909&quot;,
            &quot;wiki&quot; : &quot;https://arthas.aliyun.com/doc&quot;,
            &quot;version&quot; : &quot;3.3.7&quot;
         },
         {
            &quot;inputStatus&quot; : &quot;ALLOW_INPUT&quot;,
            &quot;type&quot; : &quot;input_status&quot;,
            &quot;jobId&quot; : 0
         }
      ]
   },
   &quot;sessionId&quot; : &quot;b09f1353-202c-407b-af24-701b744f971e&quot;,
   &quot;consumerId&quot; : &quot;8f7f6ad7bc2d4cb5aa57a530927a95cc_2&quot;,
   &quot;state&quot; : &quot;SUCCEEDED&quot;
}

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h4 id="execute-commands-asynchronously" tabindex="-1"><a class="header-anchor" href="#execute-commands-asynchronously" aria-hidden="true">#</a> Execute commands asynchronously</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>curl -Ss -XPOST http://localhost:8563/api -d &#39;&#39;&#39;
{
  &quot;action&quot;:&quot;async_exec&quot;,
  &quot;command&quot;:&quot;watch demo.MathGame primeFactors \\&quot;{params, returnObj, throwExp}\\&quot; &quot;,
  &quot;sessionId&quot; : &quot;2b085b5d-883b-4914-ab35-b2c5c1d5aa2a&quot;
}
&#39;&#39;&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Response of <code>async_exec</code>:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>{
   &quot;sessionId&quot; : &quot;2b085b5d-883b-4914-ab35-b2c5c1d5aa2a&quot;,
   &quot;state&quot; : &quot;SCHEDULED&quot;,
   &quot;body&quot; : {
      &quot;jobStatus&quot; : &quot;READY&quot;,
      &quot;jobId&quot; : 3,
      &quot;command&quot; : &quot;watch demo.MathGame primeFactors \\&quot;{params, returnObj, throwExp}\\&quot; &quot;
   }
}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li><code>state</code> : The status of <code>SCHEDULED</code> means that the command has been parsed and generated the job, but the execution has not started.</li><li><code>body.jobId</code> : The job id of command execution, filter the command results output in <code>pull_results</code> according to this job ID.</li><li><code>body.jobStatus</code> : The job status <code>READY</code> means that execution has not started.</li></ul><p>The shell output of the script that continuously pulls the result message:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>{
   &quot;body&quot; : {
      &quot;results&quot; : [
         {
            &quot;type&quot; : &quot;command&quot;,
            &quot;jobId&quot; : 3,
            &quot;state&quot; : &quot;SCHEDULED&quot;,
            &quot;command&quot; : &quot;watch demo.MathGame primeFactors \\&quot;{params, returnObj, throwExp}\\&quot; &quot;
         },
         {
            &quot;inputStatus&quot; : &quot;ALLOW_INTERRUPT&quot;,
            &quot;jobId&quot; : 0,
            &quot;type&quot; : &quot;input_status&quot;
         },
         {
            &quot;success&quot; : true,
            &quot;jobId&quot; : 3,
            &quot;effect&quot; : {
               &quot;listenerId&quot; : 3,
               &quot;cost&quot; : 24,
               &quot;classCount&quot; : 1,
               &quot;methodCount&quot; : 1
            },
            &quot;type&quot; : &quot;enhancer&quot;
         },
         {
            &quot;sizeLimit&quot; : 10485760,
            &quot;expand&quot; : 1,
            &quot;jobId&quot; : 3,
            &quot;type&quot; : &quot;watch&quot;,
            &quot;cost&quot; : 0.071499,
            &quot;ts&quot; : 1596703453237,
            &quot;value&quot; : [
               [
                  -170365
               ],
               null,
               {
                  &quot;stackTrace&quot; : [
                     {
                        &quot;className&quot; : &quot;demo.MathGame&quot;,
                        &quot;classLoaderName&quot; : &quot;app&quot;,
                        &quot;methodName&quot; : &quot;primeFactors&quot;,
                        &quot;nativeMethod&quot; : false,
                        &quot;lineNumber&quot; : 46,
                        &quot;fileName&quot; : &quot;MathGame.java&quot;
                     },
                     ...
                  ],
                  &quot;localizedMessage&quot; : &quot;number is: -170365, need &gt;= 2&quot;,
                  &quot;@type&quot; : &quot;java.lang.IllegalArgumentException&quot;,
                  &quot;message&quot; : &quot;number is: -170365, need &gt;= 2&quot;
               }
            ]
         },
         {
            &quot;type&quot; : &quot;watch&quot;,
            &quot;cost&quot; : 0.033375,
            &quot;jobId&quot; : 3,
            &quot;ts&quot; : 1596703454241,
            &quot;value&quot; : [
               [
                  1
               ],
               [
                  2,
                  2,
                  2,
                  2,
                  13,
                  491
               ],
               null
            ],
            &quot;sizeLimit&quot; : 10485760,
            &quot;expand&quot; : 1
         }
      ]
   },
   &quot;consumerId&quot; : &quot;8ecb9cb7c7804d5d92e258b23d5245cc_1&quot;,
   &quot;sessionId&quot; : &quot;2b085b5d-883b-4914-ab35-b2c5c1d5aa2a&quot;,
   &quot;state&quot; : &quot;SUCCEEDED&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br></div></div><p>The <code>value</code> of the watch command result is the value of watch-experss, and the above command is <code>{params, returnObj, throwExp}</code>, so the value of the watch result is an array of length 3, and each element corresponds to the expression in the corresponding order.</p><p>Please refer to the section &quot;<a href="#change_watch_value_to_map">Make watch command output a map object</a>&quot;.</p><h4 id="interrupt-command-execution" tabindex="-1"><a class="header-anchor" href="#interrupt-command-execution" aria-hidden="true">#</a> Interrupt command execution</h4><p>Interrupt the running foreground job of the session:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>curl -Ss -XPOST http://localhost:8563/api -d &#39;&#39;&#39;
{
  &quot;action&quot;:&quot;interrupt_job&quot;,
  &quot;sessionId&quot; : &quot;2b085b5d-883b-4914-ab35-b2c5c1d5aa2a&quot;
}
&#39;&#39;&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>{
   &quot;state&quot; : &quot;SUCCEEDED&quot;,
   &quot;body&quot; : {
      &quot;jobStatus&quot; : &quot;TERMINATED&quot;,
      &quot;jobId&quot; : 3
   }
}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="close-session" tabindex="-1"><a class="header-anchor" href="#close-session" aria-hidden="true">#</a> Close session</h4><p>Specify the session ID to close the session.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>curl -Ss -XPOST http://localhost:8563/api -d &#39;&#39;&#39;
{
  &quot;action&quot;:&quot;close_session&quot;,
  &quot;sessionId&quot; : &quot;2b085b5d-883b-4914-ab35-b2c5c1d5aa2a&quot;
}
&#39;&#39;&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>{
   &quot;state&quot; : &quot;SUCCEEDED&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="authentication" tabindex="-1"><a class="header-anchor" href="#authentication" aria-hidden="true">#</a> Authentication</h3>`,73),v=s("Reference: "),x=s("auth"),j=e("h3",{id:"web-ui",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#web-ui","aria-hidden":"true"},"#"),s(" Web UI")],-1),_=e("p",null,[e("img",{src:r,alt:"",title:"arthas web ui"})],-1),y=s("A Web UI based on Http API, visit url : "),I={href:"http://127.0.0.1:8563/ui",target:"_blank",rel:"noopener noreferrer"},w=s("http://127.0.0.1:8563/ui"),E=s(" ."),T=t(`<p>Completed functions:</p><ul><li>Create a session</li><li>Copy and open the url to join the session, share the session with multiple people</li><li>Continuously pull session command result messages</li><li>Refresh the web page or join the session to pull command messages history</li><li>Control input or interrupt command status</li></ul><p>Pending function:</p><ul><li>Improve the readability of command result messages</li><li>Support automatic completion of input commands and command templates</li><li>Provide command help</li><li>Support personal profile settings</li></ul><p><a id="special_command_results"></a></p><h3 id="special-command-results" tabindex="-1"><a class="header-anchor" href="#special-command-results" aria-hidden="true">#</a> Special command results</h3><h4 id="status" tabindex="-1"><a class="header-anchor" href="#status" aria-hidden="true">#</a> status</h4><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>{
    &quot;jobId&quot; : 5,
    &quot;statusCode&quot; : 0,
    &quot;type&quot; : &quot;status&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>type</code> is <code>status</code> to indicate the command execution status:</p><p>After each command is executed, there is a unique status result. If the <code>statusCode</code> is 0, it means the execution is successful, and the <code>statusCode</code> is a non-zero value that means the execution failed, similar to the process exit code.</p><p>When the command execution fails, an error message is generally provided, such as:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>{
  &quot;jobId&quot;:3,
  &quot;message&quot;:&quot;The argument &#39;class-pattern&#39; is required&quot;,
  &quot;statusCode&quot;:-10,
  &quot;type&quot;:&quot;status&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="input-status" tabindex="-1"><a class="header-anchor" href="#input-status" aria-hidden="true">#</a> input_status</h4><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code> {
    &quot;inputStatus&quot; : &quot;ALLOW_INPUT&quot;,
    &quot;type&quot; : &quot;input_status&quot;,
    &quot;jobId&quot; : 0
 }
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>type</code> is <code>input_status</code> to indicate input status:</p><p>It is used to control user input during UI interaction, and a change message will be sent before and after each command is executed.</p><p>Possible values \u200B\u200Bof <code>inputStatus</code>:</p><ul><li><code>ALLOW_INPUT</code> : Allow users to enter commands, which means that the session has no foreground command being executed and can accept new command.</li><li><code>ALLOW_INTERRUPT</code> : Allow the user to interrupt the command execution, indicating that a command is currently being executed, and the user can send <code>interrupt_job</code> to interrupt the execution.</li><li><code>DISABLED</code> : In the disabled state, commands cannot be entered or interrupted.</li></ul><h4 id="command" tabindex="-1"><a class="header-anchor" href="#command" aria-hidden="true">#</a> command</h4><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code> {
    &quot;type&quot; : &quot;command&quot;,
    &quot;jobId&quot; : 3,
    &quot;state&quot; : &quot;SCHEDULED&quot;,
    &quot;command&quot; : &quot;watch demo.MathGame primeFactors \\&quot;{params, returnObj, throwExp}\\&quot; &quot;
 }
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>type</code> is <code>command</code> to indicate the input command data:</p><p>It is used for the interactive UI to echo the commands entered by the user. The pulled session command message history will contain messages of type <code>command</code>, which can be processed in order.</p><h4 id="enhancer" tabindex="-1"><a class="header-anchor" href="#enhancer" aria-hidden="true">#</a> enhancer</h4><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code> {
    &quot;success&quot; : true,
    &quot;jobId&quot; : 3,
    &quot;effect&quot; : {
       &quot;listenerId&quot; : 3,
       &quot;cost&quot; : 24,
       &quot;classCount&quot; : 1,
       &quot;methodCount&quot; : 1
    },
    &quot;type&quot; : &quot;enhancer&quot;
 }
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>type</code> is <code>enhancer</code> to indicate the result of class enhancement:</p><p>Commands such as <code>trace/watch/jad/tt</code> need to enhance the class and will receive this <code>enhancer</code> result. It may happen that the result of <code>enhancer</code> is successful, but there is no hit method. The client can prompt the user according to the result of <code>enhancer</code>.</p><h3 id="cases" tabindex="-1"><a class="header-anchor" href="#cases" aria-hidden="true">#</a> Cases</h3><h4 id="get-classpath-of-java-application" tabindex="-1"><a class="header-anchor" href="#get-classpath-of-java-application" aria-hidden="true">#</a> Get classpath of Java application</h4><p>Get system properties of the Java application through Http api and extract the value of <code>java.class.path</code>.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>json_data=$(curl -Ss -XPOST http://localhost:8563/api -d &#39;
{
  &quot;action&quot;:&quot;exec&quot;,
  &quot;command&quot;:&quot;sysprop&quot;
}&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>Extract value with <code>sed</code>:</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>class_path=$(echo $json_data | tr -d &#39;\\n&#39; | sed &#39;s/.*&quot;java.class.path&quot;:&quot;\\([^&quot;]*\\).*/\\1/&#39;)
echo &quot;classpath: $class_path&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>Extract value with <code>json_pp/awk</code>:</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>class_path=$(echo $json_data | tr -d &#39;\\n&#39; | json_pp | grep java.class.path | awk -F&#39;&quot;&#39; &#39;{ print $4 }&#39;)
echo &quot;classpath: $class_path&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Output:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>classpath: demo-arthas-spring-boot.jar
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>NOTE:</p><ul><li><code>echo $json_data | tr -d &#39;\\n&#39;</code> : Delete line breaks (the value of <code>line.separator</code>) to avoid affecting the processing of <code>sed</code>/<code>json_pp</code> commands.</li><li><code>awk -F&#39;&quot;&#39; &#39;{ print $4 }&#39;</code> : Use double quote as delimiter</li></ul><p><a id="change_watch_value_to_map"></a></p><h4 id="make-watch-command-output-a-map-object" tabindex="-1"><a class="header-anchor" href="#make-watch-command-output-a-map-object" aria-hidden="true">#</a> Make watch command output a map object</h4>`,40),S=s("The result value of "),C=e("code",null,"watch",-1),D=s(" is generated by calculating the "),A=e("code",null,"watch-express",-1),O=s(" ognl expression. You can change the ognl expression to generate the desired value, please refer to "),P={href:"https://commons.apache.org/proper/commons-ognl/language-guide.html",target:"_blank",rel:"noopener noreferrer"},L=s("OGNL document"),U=s("."),k=t(`<blockquote><p>Maps can also be created using a special syntax.</p><p>#{ &quot;foo&quot; : &quot;foo value&quot;, &quot;bar&quot; : &quot;bar value&quot; }</p><p>This creates a Map initialized with mappings for &quot;foo&quot; and &quot;bar&quot;.</p></blockquote><p>The following command generates values \u200B\u200Bin map format:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>watch *MathGame prime* &#39;#{ &quot;params&quot; : params, &quot;returnObj&quot; : returnObj, &quot;throwExp&quot;: throwExp}&#39; -x 2 -n 5
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Execute the above command in Telnet shell/WebConsole, the output result:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ts=2020-08-06 16:57:20; [cost=0.241735ms] result=@LinkedHashMap[
    @String[params]:@Object[][
        @Integer[1],
    ],
    @String[returnObj]:@ArrayList[
        @Integer[2],
        @Integer[241],
        @Integer[379],
    ],
    @String[throwExp]:null,
]
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Execute the above command with Http api, pay attention to escaping the JSON double quotes:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>curl -Ss -XPOST http://localhost:8563/api -d @- &lt;&lt; EOF
{
  &quot;action&quot;:&quot;exec&quot;,
  &quot;execTimeout&quot;: 30000,
  &quot;command&quot;:&quot;watch *MathGame prime* &#39;#{ \\&quot;params\\&quot; : params, \\&quot;returnObj\\&quot; : returnObj, \\&quot;throwExp\\&quot;: throwExp}&#39; -n 3 &quot;
}
EOF
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Http api execution result:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>{
    &quot;body&quot;: {
         ...
        &quot;results&quot;: [
            ...
            {
                ...
                &quot;type&quot;: &quot;watch&quot;,
                &quot;value&quot;: {
                    &quot;params&quot;: [
                        1
                    ],
                    &quot;returnObj&quot;: [
                        2,
                        5,
                        17,
                        23,
                        23
                    ]
                }
            },
            {
                ...
                &quot;type&quot;: &quot;watch&quot;,
                &quot;value&quot;: {
                    &quot;params&quot;: [
                        -98278
                    ],
                    &quot;throwExp&quot;: {
                        &quot;@type&quot;: &quot;java.lang.IllegalArgumentException&quot;,
                        &quot;localizedMessage&quot;: &quot;number is: -98278, need &gt;= 2&quot;,
                        &quot;message&quot;: &quot;number is: -98278, need &gt;= 2&quot;,
                        &quot;stackTrace&quot;: [
                            ...
                        ]
                    }
                }
            },
            ...
}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>You can see that the value of the watch result becomes a map object, and the program can read value through a key .</p>`,10);function R(N,M){const a=o("ExternalLinkIcon"),u=o("RouterLink");return i(),c(d,null,[m,e("p",null,[e("a",h,[q,g,n(a)])]),f,e("ul",null,[e("li",null,[v,n(u,{to:"/en/doc/auth.html"},{default:p(()=>[x]),_:1})])]),j,_,e("p",null,[y,e("a",I,[w,n(a)]),E]),T,e("p",null,[S,C,D,A,O,e("a",P,[L,n(a)]),U]),k],64)}var W=l(b,[["render",R],["__file","http-api.html.vue"]]);export{W as default};
