import{_ as t,a as i}from"./arthas-output-svg.018486dd.js";import{_ as l,r as o,o as c,c as d,a as e,b as n,F as p,d as a,e as r}from"./app.1edb3735.js";const u={},h=e("h1",{id:"profiler",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#profiler","aria-hidden":"true"},"#"),a(" profiler")],-1),m={href:"https://arthas.aliyun.com/doc/arthas-tutorials.html?language=en&id=command-profiler",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"profiler",-1),f=a(" online tutorial"),g=a("Generate a flame graph using "),v={href:"https://github.com/jvm-profiling-tools/async-profiler",target:"_blank",rel:"noopener noreferrer"},x=a("async-profiler"),_=r(`<p>The <code>profiler</code> command supports generate flame graph for application hotspots.</p><p>The basic usage of the <code>profiler</code> command is <code>profiler action [actionArg]</code></p><h3 id="supported-options" tabindex="-1"><a class="header-anchor" href="#supported-options" aria-hidden="true">#</a> Supported Options</h3><table><thead><tr><th style="text-align:right;">Name</th><th style="text-align:left;">Specification</th></tr></thead><tbody><tr><td style="text-align:right;"><em>action</em></td><td style="text-align:left;">Action to execute</td></tr><tr><td style="text-align:right;"><em>actionArg</em></td><td style="text-align:left;">Attribute name pattern</td></tr><tr><td style="text-align:right;">[i:]</td><td style="text-align:left;">sampling interval in ns (default: 10&#39;000&#39;000, i.e. 10 ms)</td></tr><tr><td style="text-align:right;">[f:]</td><td style="text-align:left;">dump output to specified directory</td></tr><tr><td style="text-align:right;">[d:]</td><td style="text-align:left;">run profiling for specified seconds</td></tr><tr><td style="text-align:right;">[e:]</td><td style="text-align:left;">which event to trace (cpu, alloc, lock, cache-misses etc.), default value is cpu</td></tr></tbody></table><h3 id="start-profiler" tabindex="-1"><a class="header-anchor" href="#start-profiler" aria-hidden="true">#</a> Start profiler</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ profiler start
Started [cpu] profiling
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>By default, the sample event is <code>cpu</code>. Can be specified with the <code>--event</code> parameter.</p></blockquote><h3 id="get-the-number-of-samples-collected" tabindex="-1"><a class="header-anchor" href="#get-the-number-of-samples-collected" aria-hidden="true">#</a> Get the number of samples collected</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ profiler getSamples
23
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="view-profiler-status" tabindex="-1"><a class="header-anchor" href="#view-profiler-status" aria-hidden="true">#</a> View profiler status</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ profiler status
[cpu] profiling is running for 4 seconds
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Can view which <code>event</code> and sampling time.</p><h3 id="stop-profiler" tabindex="-1"><a class="header-anchor" href="#stop-profiler" aria-hidden="true">#</a> Stop profiler</h3><h4 id="generating-html-format-results" tabindex="-1"><a class="header-anchor" href="#generating-html-format-results" aria-hidden="true">#</a> Generating html format results</h4><p>By default, the result file is <code>html</code> format. You can also specify it with the <code>--format</code> parameter:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ profiler stop --format html
profiler output file: /tmp/test/arthas-output/20211207-111550.html
OK
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Or use the file name name format in the <code>--file</code> parameter. For example, <code>--file /tmp/result.html</code>.</p><h3 id="view-profiler-results-under-arthas-output-via-browser" tabindex="-1"><a class="header-anchor" href="#view-profiler-results-under-arthas-output-via-browser" aria-hidden="true">#</a> View profiler results under arthas-output via browser</h3>`,18),y=a("By default, arthas uses port 3658, which can be opened: "),w={href:"http://localhost:3658/arthas-output/",target:"_blank",rel:"noopener noreferrer"},k=a("http://localhost:3658/arthas-output/"),S=a(" View the "),j=e("code",null,"arthas-output",-1),q=a(" directory below Profiler results:"),B=r('<p><img src="'+t+'" alt=""></p><p>Click to view specific results:</p><p><img src="'+i+`" alt=""></p><blockquote><p>If using the chrome browser, may need to be refreshed multiple times.</p></blockquote><h3 id="profiler-supported-events" tabindex="-1"><a class="header-anchor" href="#profiler-supported-events" aria-hidden="true">#</a> Profiler supported events</h3><p>Under different platforms and different OSs, the supported events are different. For example, under macos:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ profiler list
Basic events:
  cpu
  alloc
  lock
  wall
  itimer
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Under linux</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ profiler list
Basic events:
  cpu
  alloc
  lock
  wall
  itimer
Perf events:
  page-faults
  context-switches
  cycles
  instructions
  cache-references
  cache-misses
  branches
  branch-misses
  bus-cycles
  L1-dcache-load-misses
  LLC-load-misses
  dTLB-load-misses
  mem:breakpoint
  trace:tracepoint
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>`,9),C=a("If you encounter the permissions/configuration issues of the OS itself and then missing some events, you can refer to the "),T={href:"https://github.com/jvm-profiling-tools/async-profiler",target:"_blank",rel:"noopener noreferrer"},$=a("async-profiler"),V=a(" documentation."),I=r(`<p>You can use the <code>--event</code> parameter to specify the event to sample, such as sampling the <code>alloc</code> event:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ profiler start --event alloc
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="resume-sampling" tabindex="-1"><a class="header-anchor" href="#resume-sampling" aria-hidden="true">#</a> Resume sampling</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ profiler resume
Started [cpu] profiling
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>The difference between <code>start</code> and <code>resume</code> is: <code>start</code> is the new start sampling, <code>resume</code> will retain the data of the last <code>stop</code>.</p><p>You can verify the number of samples by executing <code>profiler getSamples</code>.</p><h3 id="use-execute-action-to-execute-complex-commands" tabindex="-1"><a class="header-anchor" href="#use-execute-action-to-execute-complex-commands" aria-hidden="true">#</a> Use <code>execute</code> action to execute complex commands</h3><p>For example, start sampling:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>profiler execute &#39;start,framebuf=5000000&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Stop sampling and save to the specified file:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>profiler execute &#39;stop,file=/tmp/result.html&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,11),A=a("Specific format reference: "),F={href:"https://github.com/jvm-profiling-tools/async-profiler/blob/v2.5/src/arguments.cpp#L50",target:"_blank",rel:"noopener noreferrer"},L=a("arguments.cpp"),N=r(`<h3 id="view-all-supported-actions" tabindex="-1"><a class="header-anchor" href="#view-all-supported-actions" aria-hidden="true">#</a> View all supported actions</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ profiler actions
Supported Actions: [resume, dumpCollapsed, getSamples, start, list, execute, version, stop, load, dumpFlat, actions, dumpTraces, status]
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="view-version" tabindex="-1"><a class="header-anchor" href="#view-version" aria-hidden="true">#</a> View version</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ profiler version
Async-profiler 1.6 built on Sep  9 2019
Copyright 2019 Andrei Pangin
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="configure-framebuf-option" tabindex="-1"><a class="header-anchor" href="#configure-framebuf-option" aria-hidden="true">#</a> Configure framebuf option</h3><blockquote><p>If you encounter <code>[frame_buffer_overflow]</code> in the generated result, you need to increase the framebuf (the default value is 1&#39;000&#39;000), which can be configured explicitly, such as:</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>profiler start --framebuf 5000000
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="configure-include-exclude-to-filter-data" tabindex="-1"><a class="header-anchor" href="#configure-include-exclude-to-filter-data" aria-hidden="true">#</a> Configure include/exclude to filter data</h3><p>If the application is complex and generates a lot of content, and you want to focus on only part of the data, you can filter by include/exclude. such as</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>profiler start --include&#39;java/*&#39; --include&#39;demo/*&#39; --exclude&#39;*Unsafe.park*&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>Both include/exclude support setting multiple values, but need to be configured at the end of the command line.</p></blockquote><h3 id="specify-execution-time" tabindex="-1"><a class="header-anchor" href="#specify-execution-time" aria-hidden="true">#</a> Specify execution time</h3><p>For example, if you want the profiler to automatically end after 300 seconds, you can specify it with the <code>-d</code>/<code>--duration</code> parameter:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>profiler start --duration 300
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="generate-jfr-format-result" tabindex="-1"><a class="header-anchor" href="#generate-jfr-format-result" aria-hidden="true">#</a> Generate jfr format result</h3><blockquote><p>Note that jfr only supports configuration at <code>start</code>. If it is specified at <code>stop</code>, it will not take effect.</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>profiler start --file /tmp/test.jfr
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The <code>file</code> parameter supports some variables:</p><ul><li>Timestamp: <code>--file /tmp/test-%t.jfr</code></li><li>Process ID: <code>--file /tmp/test-%p.jfr</code></li></ul><p>The generated results can be viewed with tools that support the jfr format. such as:</p><ul><li>JDK Mission Control: https://github.com/openjdk/jmc</li><li>JProfiler: https://github.com/alibaba/arthas/issues/1416</li></ul><h3 id="the-unknown-in-profiler-result" tabindex="-1"><a class="header-anchor" href="#the-unknown-in-profiler-result" aria-hidden="true">#</a> The &#39;unknown&#39; in profiler result</h3><ul><li>https://github.com/jvm-profiling-tools/async-profiler/discussions/409</li></ul>`,23);function P(O,G){const s=o("ExternalLinkIcon");return c(),d(p,null,[h,e("p",null,[e("a",m,[b,f,n(s)])]),e("blockquote",null,[e("p",null,[g,e("a",v,[x,n(s)])])]),_,e("p",null,[y,e("a",w,[k,n(s)]),S,j,q]),B,e("p",null,[C,e("a",T,[$,n(s)]),V]),I,e("p",null,[A,e("a",F,[L,n(s)])]),N],64)}var Y=l(u,[["render",P],["__file","profiler.html.vue"]]);export{Y as default};
